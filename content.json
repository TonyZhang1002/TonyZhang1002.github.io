{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"一个web项目学会Spring Boot + mongoDB + Thymeleaf + Docker （中）","slug":"14","date":"2019-12-05T13:54:19.000Z","updated":"2019-12-06T11:06:47.473Z","comments":true,"path":"2019/12/05/14/","link":"","permalink":"http://yoursite.com/2019/12/05/14/","excerpt":"","text":"前情回顾上一集我们说到怎么建立简单的Spring Boot项目，并且在后端随机十张照片并使用Thymeleaf注入到网页中。这一集我们会使用前端的form（表单）获取用户对照片的评分，然后把评分储存在数据库MongoDB中，完成数据的所谓“持久化”。 创建用户评分首先我们要创建一个domain包然后在这里创建一个UserAnswer的class用来保存用户的打分。 在这个class里，我们构建多个变量用来保存用户的评分，并为它们生成setter和getter，后面有需要。 UserAnswer.java里如这样： 1/*2@author Qinyuan Zhang3@date 01/04/20194*/5public class UserAnswer &#123;6 private String name = \"unknown\";7 private String email = \"unknown\";8 private String q1;9 private String q2;10 private String q3;11 //......省略一些........12 private List&lt;String&gt; imageNames;1314 public String getName() &#123;15 return name;16 &#125;1718 public String getEmail() &#123;19 return email;20 &#125;2122 public String getQ1() &#123;23 return q1;24 &#125;2526 public String getQ2() &#123;27 return q2;28 &#125;2930 public String getQ3() &#123;31 return q3;32 &#125;3334 //......省略一些........3536 public List&lt;String&gt; getImageNames() &#123;37 return imageNames;38 &#125;3940 public String[] wrapperOfAnswers() &#123;41 return new String[] &#123;q1, q2, q3, q4, q5, q6, q7, q8, q9, q10&#125;;42 &#125;4344 public void setName(String name) &#123;45 this.name = name;46 &#125;4748 public void setEmail(String email) &#123;49 this.email = email;50 &#125;5152 public void setQ1(String q1) &#123;53 this.q1 = q1;54 &#125;5556 public void setQ2(String q2) &#123;57 this.q2 = q2;58 &#125;5960 public void setQ3(String q3) &#123;61 this.q3 = q3;62 &#125;6364 //......省略一些........6566 public void setImageNames(List&lt;String&gt; imageNames) &#123;67 this.imageNames = imageNames;68 &#125;69&#125; 注意我们之所以不用List之类的保存用户对十张随即照片的评分是因为我们在Thymeleaf的表单中，似乎只能用这种方式才能拿到信息。 我们看Thymeleaf中（前端），怎么写这个form表单。同样是在index.html中： 1&lt;form th:action=\"@&#123;/submitForm&#125;\" th:object=\"$&#123;userAnswer&#125;\" method=\"post\"&gt;2 &lt;h2&gt;Fill in your personal info. (You can ignore these if you don't want to)&lt;/h2&gt;3 &lt;label for=\"name\"&gt;Please enter your name:&lt;/label&gt;&lt;br&gt;4 &lt;input type=\"text\" name=\"name\" id=\"name\"/&gt;&lt;br&gt;5 &lt;label for=\"email\"&gt;Please enter your email:&lt;/label&gt;&lt;br&gt;6 &lt;input type=\"text\" name=\"email\" id=\"email\"/&gt;&lt;br&gt;78 &lt;h2&gt;Part One, Real or Fake?&lt;/h2&gt;9 &lt;label&gt;&lt;/label&gt;&lt;br&gt;10 &lt;ul th:each=\"imageNameFrontend,Stat : $&#123;imageNamesFrontend&#125;\"&gt;11 &lt;li&gt;12 &lt;img th:src=\"@&#123;'/img/'+$&#123;imageNameFrontend&#125;&#125;\"&gt;&lt;br th:if = \"$&#123;Stat.count&#125; &lt;= 5\"&gt;13 &lt;input type=\"radio\" th:if = \"$&#123;Stat.count&#125; &lt;= 5\" th:name=\"q + ($&#123;Stat.count&#125;)\" th:id=\"'q' + ($&#123;Stat.count&#125;) + '-0'\" th:value=\"'q' + ($&#123;Stat.count&#125;) + 'Real'\" required=\"required\" th:text = \"$&#123;RealText&#125;\"&gt;&lt;br th:if = \"$&#123;Stat.count&#125; &lt;= 5\"&gt;14 &lt;input type=\"radio\" th:if = \"$&#123;Stat.count&#125; &lt;= 5\" th:name=\"q + ($&#123;Stat.count&#125;)\" th:id=\"'q' + ($&#123;Stat.count&#125;) + '-1'\" th:value=\"'q' + ($&#123;Stat.count&#125;) + 'False'\" required=\"required\" th:text = \"$&#123;FakeText&#125;\"&gt;&lt;br th:if = \"$&#123;Stat.count&#125; &lt;= 5\"&gt;15 &lt;p th:if = \"$&#123;Stat.count&#125; &gt; 5\" th:text = \"$&#123;HintStarText&#125;\"&gt;&lt;/p&gt;16 &lt;input type=\"radio\" th:if = \"$&#123;Stat.count&#125; &gt; 5\" th:name=\"q + ($&#123;Stat.count&#125;)\" th:id=\"'q' + ($&#123;Stat.count&#125;) + '-0'\" th:value=\"One\" required=\"required\" th:text = \"$&#123;OneStarText&#125;\"&gt;&lt;br th:if = \"$&#123;Stat.count&#125; &gt; 5\"&gt;17 &lt;input type=\"radio\" th:if = \"$&#123;Stat.count&#125; &gt; 5\" th:name=\"q + ($&#123;Stat.count&#125;)\" th:id=\"'q' + ($&#123;Stat.count&#125;) + '-0'\" th:value=\"Two\" required=\"required\" th:text = \"$&#123;TwoStarText&#125;\"&gt;&lt;br th:if = \"$&#123;Stat.count&#125; &gt; 5\"&gt;18 &lt;input type=\"radio\" th:if = \"$&#123;Stat.count&#125; &gt; 5\" th:name=\"q + ($&#123;Stat.count&#125;)\" th:id=\"'q' + ($&#123;Stat.count&#125;) + '-0'\" th:value=\"Three\" required=\"required\" th:text = \"$&#123;ThreeStarText&#125;\"&gt;&lt;br th:if = \"$&#123;Stat.count&#125; &gt; 5\"&gt;19 &lt;input type=\"radio\" th:if = \"$&#123;Stat.count&#125; &gt; 5\" th:name=\"q + ($&#123;Stat.count&#125;)\" th:id=\"'q' + ($&#123;Stat.count&#125;) + '-0'\" th:value=\"Four\" required=\"required\" th:text = \"$&#123;FourStarText&#125;\"&gt;&lt;br th:if = \"$&#123;Stat.count&#125; &gt; 5\"&gt;20 &lt;/li&gt;21 &lt;/ul&gt;22 &lt;input type=\"submit\" value=\"submit\"&gt;23&lt;/form&gt; 选取其中一行来看： 1&lt;input type=\"radio\" th:if = \"$&#123;Stat.count&#125; &lt;= 5\" th:name=\"q + ($&#123;Stat.count&#125;)\" th:id=\"'q' + ($&#123;Stat.count&#125;) + '-1'\" th:value=\"'q' + ($&#123;Stat.count&#125;) + 'False'\" required=\"required\" th:text = \"$&#123;FakeText&#125;\"&gt;&lt;br th:if = \"$&#123;Stat.count&#125; &lt;= 5\"&gt; 首先我们用type=&quot;radio&quot;来表示这是一个单选按钮。 然后th:if = &quot;${Stat.count} &lt;= 5&quot;这个表示假如循环在5个以内，显示这个，否则就是下一种问题了。 th:name=&quot;q + (${Stat.count})&quot; th:id=&quot;&#39;q&#39; + (${Stat.count}) + &#39;-1&#39;&quot;这两个能让后端找到这项的值，注意th:name的值，与UserAnswer.java里的值一一对应。 th:value=&quot;&#39;q&#39; + (${Stat.count}) + &#39;False&#39;&quot;这里的值（字符串）会被后端使用，保存至对应的UserAnswer的变量中。 现在我们再打开应用，浏览localhost:8080/surveyForm，看看主页是什么样的了呢？ 可以看到，不仅随机到了照片，还生成了两种不同的评分选项。 后端获取评分既然前端已经生成了两种不同的打分模式了，后端怎么获取用户的评分呢？其实非常简单，因为我们已经在th:name和th:value里设置了名字和值了，后端只需要在用户post的时候，创建一个UserAnswer的实例，Thymeleaf就会自动的帮我们把表单里的数值通过setter在实例中设置。 首先我们看刚刚那个index.html的代码，在第一行form后，我们有这么一个代码，th:action=&quot;@{/submitForm}&quot;，这个表示在用户点击submit之后，/submitForm这个post会被执行。所以我们在controller里面写一个方法来实现这个post的行为。 在MainController.java中： 1@PostMapping(value = \"/submitForm\")2 public String getInfo(@ModelAttribute UserAnswer userAnswer) &#123;3 userAnswer.setImageNames(randomGenerateImageNames.getImageNamesBackend());4 // 你可以尝试看看数值有没有在实例中5 // System.out.println(userAnswer.getQ1());6 ms.addResults(userAnswer);7 // Clear the pic names8 randomGenerateImageNames.clearImageNames();9 // 返回一个简单的成功的网页10 return \"success\";11 &#125; 注意我们的变量里有一个@ModelAttribute UserAnswer userAnswer，这里Thymeleaf会自动帮我们生成带有用户在表单中所填信息的实例。 当然，我们要把随机出来的照片信息也一并传入新建的这个userAnswer的实例中，等等方便保存在数据库里。 使用MongoDB持久化数据其实就是把数据保存好，我们先建立一个package叫dao代表Data access object，也可以是dpo，Data persistence object，无所谓，然后在其中创建一个与MongoDB沟通的class，我命名为MongoDB.java。 当然， 你先要启动Mongo服务，我建议使用docker，简单直接 （这里下载Mac和Win版本， Linux下的安装自行搜索吧）。如果你已经安装了docker，直接使用：docker run --name db -p 27017:27017 -d mongo:latest即可启动mongoDB，并监听localhost的27017端口。 其次为了使用mongo，我们需要在pom.xml中添加dependence： 1&lt;dependency&gt;2 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;3 &lt;artifactId&gt;spring-boot-starter-data-mongodb&lt;/artifactId&gt;4&lt;/dependency&gt; 这两步一定要做哦！ 随后，在MongoDB.java中： 1/*2@author Qinyuan Zhang3@date 01/04/20194*/5public class MongoDB &#123;67 // 单例模式8 private static final MongoDB instance = new MongoDB();910 private MongoDB() &#123;&#125;1112 public static MongoDB getInstance() &#123;13 return instance;14 &#125;1516 // 这一行用来找到mongo服务，注意一定要启动服务哦17 MongoClient mongo = new MongoClient(\"localhost\", 27017);1819 // 获取数据库中的指定Collection20 public MongoCollection&lt;Document&gt; getTable () &#123;21 MongoDatabase db = mongo.getDatabase(\"usersAnswers\");22 return db.getCollection(\"user\");23 &#125;2425 // 初始化4*100的数据26 public void initDB () &#123;27 MongoCollection&lt;Document&gt; table = this.getTable();28 List&lt;Document&gt; documents = new ArrayList&lt;&gt;();29 for (int i = 0; i &lt; 101; i++) &#123;30 for (int j = 0; j &lt; 4; j++) &#123;31 Document document = new Document(\"pic\", i + \"-\" + j).32 append(\"Real\", 0).append(\"Fake\", 0).append(\"Rate\", 0).33 append(\"1Involve\", 0).append(\"2Involve\", 0);34 documents.add(document);35 &#125;36 &#125;37 table.insertMany(documents);38 &#125;3940 // 更新数据41 public void updateOneInDB(String picBackend, String key, int value) &#123;42 getTable().updateOne(Filters.eq(\"pic\", picBackend), new Document(\"$inc\",new Document(key,value)));43 &#125;4445 // 获取遍历的cursor46 public MongoCursor&lt;Document&gt; getMongoCursor () &#123;47 FindIterable&lt;Document&gt; findIterable = getTable().find();48 return findIterable.iterator();49 &#125;5051 // 关闭连接52 public void closeConnection () &#123;53 if (mongo != null) &#123;54 mongo.close();55 &#125;56 &#125;57&#125; 方法都简单明了，在这儿就不赘述了。 随后我们建立一个MainService.java，根据两种问题的不同，添加数据。 1/*2@author Qinyuan Zhang3@date 01/04/20194*/5@Service6public class MainService &#123;7 8 // Define variable constants9 private static final String InvolveInFirstKindQuestions = \"1Involve\";10 private static final String InvolveInSecondKindQuestions = \"2Involve\";11 private static final String RealMarker = \"Real\";12 private static final String FakeMarker = \"Fake\";13 private static final String RateMarker = \"Rate\";14 15 16 // Use the singleton instance17 private MongoDB mDB = MongoDB.getInstance();1819 // A method to init the DB20 public void initDB() &#123;21 mDB.initDB();22 &#125;2324 // 添加用户评分的方法25 public void addResults (UserAnswer userAnswer) &#123;26 int picIndex = 1;27 for (String pic : userAnswer.getImageNames()) &#123;28 // 如果是第一种问题29 if (picIndex &lt;=5) &#123;30 if (userAnswer.wrapperOfAnswers()[picIndex - 1].equals(\"q\" + picIndex +RealMarker)) &#123;31 mDB.updateOneInDB(pic, RealMarker, 1);32 &#125; else &#123;33 mDB.updateOneInDB(pic, FakeMarker, 1);34 &#125;35 mDB.updateOneInDB(pic, InvolveInFirstKindQuestions, 1);36 &#125;37 // 如果是第二种问题38 else &#123;39 addRates(userAnswer.wrapperOfAnswers()[picIndex - 1],pic);40 &#125;41 picIndex++;42 &#125;43 &#125;4445 // A method to add rates to the DB46 public void addRates (String result, String pic) &#123;47 switch (result) &#123;48 case \"One\":49 mDB.updateOneInDB(pic, RateMarker, 1);50 break;51 case \"Two\":52 mDB.updateOneInDB(pic, RateMarker, 2);53 break;54 case \"Three\":55 mDB.updateOneInDB(pic, RateMarker, 3);56 break;57 case \"Four\":58 mDB.updateOneInDB(pic, RateMarker, 4);59 break;60 default:61 break;62 &#125;63 mDB.updateOneInDB(pic, InvolveInSecondKindQuestions, 1);64 &#125;6566 // A method to get results from the DB67 public Map&lt;String, Map&lt;String, Integer&gt;&gt; getResults() &#123;6869 Map&lt;String, Map&lt;String, Integer&gt;&gt; results = new TreeMap&lt;&gt;();70 Map&lt;String, Integer&gt; oriMap = new TreeMap&lt;&gt;();71 Map&lt;String, Integer&gt; ordMap = new TreeMap&lt;&gt;();72 Map&lt;String, Integer&gt; ganMap = new TreeMap&lt;&gt;();73 Map&lt;String, Integer&gt; resMap = new TreeMap&lt;&gt;();7475 MongoCursor&lt;Document&gt; mongoCursor = mDB.getMongoCursor();76 while(mongoCursor.hasNext())&#123;77 Document currentCursor = mongoCursor.next();78 switch (((String) currentCursor.get(\"pic\")).split(\"-\")[1]) &#123;79 case \"0\":80 getInfoFromDB(currentCursor, oriMap);81 break;82 case \"1\":83 getInfoFromDB(currentCursor, ordMap);84 break;85 case \"2\":86 getInfoFromDB(currentCursor, ganMap);87 break;88 case \"3\":89 getInfoFromDB(currentCursor, resMap);90 break;91 default:92 break;93 &#125;94 results.put(\"Ori\", oriMap);95 results.put(\"Ord\", ordMap);96 results.put(\"Gan\", ganMap);97 results.put(\"Res\", resMap);98 &#125;99 return results;100 &#125; 这里使用MongoDB.java中的单例，讲userAnswer中的数据拿出并存储到了数据库中。 万事俱备，我们最后再看一看项目的结果吧！ 启动项目，访问localhost:8080/surveyForm，打分十张照片，点击submit，看看docker里的数据有没有更新呢？ 你会使用已有的知识，自己写一个查看评分结果的页面吗（如下图所示）？ 总结项目结构最后我们看一看项目的整体结构（没有包括前端） 从上至下： controller：控制前端，向index.html传递随机的照片名称，从表单中获取用户的评分。 dao：操作数据库，初始化数据，更新数据，获取数据。使用单例模式。 domain：保存用户信息的class。 service：MainService获取userAnswer的信息，使用dao中提供的方法初始数据库，保存信息，获取信息。 xxxxxxWebApplication.java：项目的主入口。 最后项目的Github地址：https://github.com/TonyZhang1002/fyp-survey-web ， 注意如果不使用docker compose运行，请自行更改MongoDB.java中的MongoClient mongo = new MongoClient(&quot;db&quot;, 27017);中的“db”至“localhost”。一定要确保这个class能找到你的mongo服务哦~ 最后我们会使用docker打包整个项目，这样每次你想启动自己的项目，不管在什么机器上，只需要一个指令就可以部署啦！任何意见和评论欢迎在下方评论区留言哦！","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://yoursite.com/tags/SpringBoot/"},{"name":"MongoDB","slug":"MongoDB","permalink":"http://yoursite.com/tags/MongoDB/"},{"name":"Docker","slug":"Docker","permalink":"http://yoursite.com/tags/Docker/"},{"name":"Thymeleaf","slug":"Thymeleaf","permalink":"http://yoursite.com/tags/Thymeleaf/"}]},{"title":"记一次简单的Groovy测试重构","slug":"13","date":"2019-12-02T16:27:49.000Z","updated":"2019-12-03T09:29:30.897Z","comments":true,"path":"2019/12/02/13/","link":"","permalink":"http://yoursite.com/2019/12/02/13/","excerpt":"","text":"故事起因公司另外某个组出现了bug，似乎与我们组上一个Sprint更新的内容有关，于是我们紧急调派前线考察问题原因。发现是某一个往header里面填入数据的功能没有正常的更新header里的数据，并且Groovy Test并不能catch到这种类型的问题，于是准备重新更新一下这个单元测试。在看这个单元测试的时候，我们发现这个测试文件的生成手法相当暴力，应当适当重写。 暴力原方法原来的生成测试文件的方法类似下方代码。 1aExistingFile1 = xxxxxxUtil.createEmptyFileOnDisk(DEST_DIR_NAME, destFile)2aExistingFile2 = xxxxxxUtil.createEmptyFileOnDisk(DEST_DIR_NAME, destFile2)3aExistingFile3 = xxxxxxUtil.createEmptyFileOnDisk(DEST_DIR_NAME_UE_2, EXISTING_FILE_WITH_SUB_1)4aExistingFile4 = xxxxxxUtil.createEmptyFileOnDisk(DEST_DIR_NAME_UE_2, EXISTING_FILE_WITH_SUB_2)5aExistingFile6 = xxxxxxUtil.createEmptyFileOnDisk(PROCESSED_DEST_DIR_NAME, destFile) 单元测试后删除测试文件的方法类似下方代码。 1def parent1 = aExistingFile1.getParentFile()2def parent2 = aExistingFile3.getParentFile()3.........45aExistingFile1.delete()6aExistingFile2.delete()7.........89parent2.delete()10parent1.delete()11......... （具体内容更改并省略） 整个过程非常暴力与不干净，并且会在单元测试后在本地留下空的无用文件夹（因为没有删除干净）。这是因为所有创建空文件的常量都使用了System.getProperty(&quot;user.dir&quot;)，原作者可能觉得这是系统的user用户夹，但实际上是这个单元测试的目录。 重构方法首先我们不使用System.getProperty(&quot;user.dir&quot;)，转而使用System.getProperty(&quot;java.io.tmpdir&quot;)，这会获得系统的temp目录，相比直接在单元测试目录下生成测试文件好很多。 其次我们巧用Groovy中的map和list，快速方便的创建测试文件。 1//生成一个key为目录，value为测试文件名的list的map（句子好复杂）2def aExistingFileMap = [(DEST_DIR_NAME): [EXISTING_FILE_1, EXISTING_FILE_2],3 (DEST_DIR_NAME_UE_2): [EXISTING_FILE_WITH_SUB_1, EXISTING_FILE_WITH_SUB_2],4 (PROCESSED_DEST_DIR_NAME): [EXISTING_FILE_1, EXISTING_FILE_2],5 (DEST_DIR_NAME_STATS_2): [EXISTING_FILE_1],6 (DEST_DIR_NAME_NRAT_1): [EXISTING_FILE_WITH_SUB_3],7 (DEST_DIR_NAME_NRAT_2): [EXISTING_FILE_WITH_SUB_4]]89//利用循环一句话生成所有测试文件10aExistingFileMap.each &#123;entry -&gt; entry.value.each &#123; xxxxxxxxxUtil.createEmptyFileOnDisk(entry.key, it)&#125;&#125; 最后使用org.apache.commons.io.FileUtils中的deleteDirectory清理文件夹，干净整洁。","categories":[],"tags":[{"name":"Groovy","slug":"Groovy","permalink":"http://yoursite.com/tags/Groovy/"},{"name":"Unit Test","slug":"Unit-Test","permalink":"http://yoursite.com/tags/Unit-Test/"},{"name":"Code Refactoring","slug":"Code-Refactoring","permalink":"http://yoursite.com/tags/Code-Refactoring/"}]},{"title":"一个web项目学会Spring Boot + mongoDB + Thymeleaf + Docker （上）","slug":"12","date":"2019-03-27T15:09:58.000Z","updated":"2019-12-05T15:52:15.801Z","comments":true,"path":"2019/03/27/12/","link":"","permalink":"http://yoursite.com/2019/03/27/12/","excerpt":"","text":"最近需要制作一个调查网站来完成自己的项目，于是又准备捡起Spring Boot这个有趣的工具。Spring Boot整合了大量的框架和工具，我们能使用它轻松的制作多样的网站和应用。 第零步，项目描述这是一个非常初级的web app项目，我的Final Year Project是深度学习为图片上色，复现了三种不同文章里的方法，对同一套测试集（100张图片）使用，产生了三种不同的上色效果，结合原始彩色图片，一共有4 * 100张图片。如下图所示： 我希望建立一个调查网站，能够随机从400张图片抽取十张，组成两种问题，第一种是让用户判断图片是否为AI上色的，第二种是让用户为该图片打分。项目使用Spring Boot作为后端，Thymeleaf作为前端，mongoDB作为数据库，docker作为部署工具，拥有一套完整的流程，可以快速部署在服务器上供他人访问使用。 第一步，创建项目我使用的是学生邮箱激活的Ultimate版本，普通的Community版本应该也能够创建Spring Boot项目。当然，你也可以使用Eclipse或者其他的IDE。 选择你的SDK，点击next即可。 更改你的Artifact或者Group名字，注意Artifact名字要求严格，不能使用大写。 选择一些Dependencies，这里不需要选太多，后面还可以自行添加。我们选择一个web即可。随后点击next。 选择一个保存位置点击finish即可。 IntelliJ创建好新项目后，右下角会出现是否打开Dependencies的auto-import，我们选择”auto-import”，这样我们以后添加就不用手动引入了。 文件结构是这样的，我们可以删除选中的这四个东西，我们并不会需要用到。 第二步，添加静态网页资源 我们看src文件夹的结构，在main文件夹里我们有java文件夹和resources文件夹。java文件夹即是用了保存我们写的java文件的，而resources文件夹则是我们用来保存网页文件的。FypSurveyWebApplication.java是我们的网页应用的主入口。 先拿一个模版来示范resouces文件夹内的文件结构。 所有的html文件应该在templates之中，其余的css、JavaScript、图片、字体等文件在static中。 这里我创建一个html文件，名为index.html，这时你运行FypSurveyWebApplication.java，他会直接打开index.html。尝试运行一下你的主入口吧，控制台出现了成功的提示后，在浏览器中打开localhost:8080看看效果吧！ 这样，我们就可以透过Spring Boot打开一个静态的网站啦，当然我们想要赋予它更多的功能。 第三步，添加主Controller 我们在和主入口齐平的目录层级中添加一个controller包，这里面我们会放入所有的controller类，这些类用以控制网页和用户之间的交互，是非常重要的一个组成部分。 新建controller包后，我们在其中新建一个mainController.java，我们主要的交互逻辑都会写在里面。我们在里面写入： 1@Controller //一定要标明是controller类2public class mainController &#123;3 @GetMapping(\"/123\") //当你浏览器浏览“localhost:8080/123”的时候，下面的方法即会被执行4 String index() &#123;5 return \"index\"; //返回“index.html”给浏览器6 &#125;7&#125; 这就是一个最简单的controller类，我们首先声明自己的类型，然后用@GetMapping使所有访问localhost:8080/123的请求都会执行index()这个方法。在index()这个方法中，我们让系统返回”index.html”给浏览器（即透过return &quot;index&quot;;这一行），完成了一个简单的控制。此时再运行FypSurveyWebApplication.java，在浏览器中访问localhost:8080/123，你是否得到了和直接访问”localhost:8080”一样的结果呢？ 第四步，使用Thymeleaf创建一个简单的网页既然我的网站是一个关于图片效果的问卷调查，那么自然要有表单来获取用户反馈，我还想要有随机的图片注入网页来保证不同的用户面对着不同的问题。这里我们就可以用到Thymeleaf了。它是一个相当方便易用的前端模版引擎，简单的来说，信息能透过它，在前后端传递。我们举一个小例子，往前端注入随机图片。 首先，我们先要在Spring Boot中导入Thymeleaf的dependency，我们打开pom.xml，在中间添加： 1&lt;dependency&gt;2 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;3 &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;4&lt;/dependency&gt; 等待一会儿让IntelliJ自动导入需要的jar包（注意：这里你可能需要启动Intellij的自动引入Maven Dependencies的功能，并且国内网络环境可能会导致引入较为缓慢）。 第二步，我们往resources/static/img里传一些图片。 我的图片是101组图片，每一组有4张，一共 101*4 = 404 张照片。使用形如14-gan.png的样子命名，以方便编程。 然后，我们把先前模版的文件清空，写一个简单的问卷调查页面index.html： 1&lt;!DOCTYPE html&gt;2&lt;html lang=\"en\" xmlns:th=\"http://www.w3.org/1999/xhtml\"&gt;3&lt;head&gt;4 &lt;meta charset=\"UTF-8\"&gt;5 &lt;title&gt;FYP -- Survey of Deep-Colourisation&lt;/title&gt;6 &lt;style&gt;7 body &#123;8 background-color: #93B874;9 &#125;10 &lt;/style&gt;11&lt;/head&gt;12&lt;body&gt;13&lt;h1&gt;FYP -- Survey of Deep-Colourisation&lt;/h1&gt;14&lt;HR&gt;15&lt;form th:action=\"@&#123;/submitForm&#125;\" th:object=\"$&#123;userAnswer&#125;\" method=\"post\"&gt;16 &lt;h2&gt;Fill in your personal info. (You can ignore these if you don't want to)&lt;/h2&gt;17 &lt;label for=\"name\"&gt;Please enter your name:&lt;/label&gt;&lt;br&gt;18 &lt;input type=\"text\" name=\"name\" id=\"name\"/&gt;&lt;br&gt;19 &lt;label for=\"email\"&gt;Please enter your email:&lt;/label&gt;&lt;br&gt;20 &lt;input type=\"text\" name=\"email\" id=\"email\"/&gt;&lt;br&gt;21 &lt;h2&gt;Part One&lt;/h2&gt;22 &lt;label&gt;1. Real or Fake?&lt;/label&gt;&lt;br&gt;23 &lt;img th:src=\"@&#123;'/img/'+$&#123;imgName&#125;&#125;\"&gt;&lt;br&gt;24 &lt;input type=\"radio\" name=\"q1\" id=\"q1-0\" value=\"Real\"&gt;It is Real.&lt;br&gt;25 &lt;input type=\"radio\" name=\"q1\" id=\"q1-1\" value=\"Fake\"&gt;It is Colourised by AI.&lt;br&gt;26 &lt;input type=\"submit\" value=\"submit\"&gt;27&lt;/form&gt;28&lt;/body&gt;29&lt;/html&gt; 注意看在表单中，我们有一行是&lt;img th:src=&quot;@{&#39;/img/&#39;+${imgName}}&quot;&gt;&lt;br&gt;，这里我们写着”th:src=”就是告诉系统，后面的内容需要等待后台动态决定的，并非写死的，而后台透过${imgName}这个变量名，来传递动态生成的随机图片的名字。（注意等号后的路径一定要正确） 最后，在controller里，清空一下刚刚写的东西，并用Java语言随机一个图片名称，然后把名字告诉我们这个HTML页面。 1/*2@author Qinyuan Zhang3@date 06/02/20194*/5@Controller6public class mainController &#123;7 @GetMapping(\"\")8 public String formPage(Model model) &#123;9 int randomImg = (int) (Math.random() * 101);10 int randomTag = (int) (Math.random() * 4);11 switch (randomTag) &#123;12 case 0: model.addAttribute(\"imgName\", randomImg + \"-ord.jpg\"); break;13 case 1: model.addAttribute(\"imgName\", randomImg + \"-ori.jpg\"); break;14 case 2: model.addAttribute(\"imgName\", randomImg + \"-gan.png\"); break;15 case 3: model.addAttribute(\"imgName\", randomImg + \"-res.png\"); break;16 default: break;17 &#125;18 return \"index\";19 &#125;20&#125; 我们随机出图片名称，然后用model.addAttribute(&quot;imgName&quot;, randomName)这样的方式，把随机出来的图片名称传递给前端中的变量${imgName}，前端便会透过路径和名称，找到图片，并且显示。 现在我们访问localhost:8080,是否看到了随机的图片呢，刷新一下，是否变化了呢？ 打开Chrome的控制台，我们查找一下th:src 这一行，它写着什么呢？ 第五步，使用循环随机出10张照片并显示当然，一份问卷调查不能只有一个问题，我希望有十个问题，然后通过循环注入到网页中，我还想前五个随机的图片跟着的问题是判断，后五个跟着的问题是打分，这该怎么处理呢？ 当然首先我们得用Java语言随机出十张照片啦，在与controller文件夹平级的位置创建一个service文件夹，这个里面存放的即是service，你可以将它们当作真正的“后端”，他们不与前端接触，只通过Bean注入的方式与controller们交流。我们在这个文件夹里创建一个class叫做RandomGenerateImageNames 在这个类里面写入一个方法，从101 * 4张照片里，随机出10张照片，注意我们要在class前面注明 @Service。 1@Service2public class RandomGenerateImageNames &#123;3 private List&lt;String&gt; imageNamesBackend;4 private List&lt;String&gt; imageNamesFrontend;5 private Random random = new Random();67 public void initRandomNames () &#123;89 imageNamesBackend = new LinkedList&lt;&gt;();10 imageNamesFrontend = new LinkedList&lt;&gt;();11 List&lt;Integer&gt; preventDup = new LinkedList&lt;&gt;();1213 // Add all the possible image numbers to the list14 for (int m = 0; m &lt; 101; m++) &#123;15 preventDup.add(m);16 &#125;1718 // Generate 10 images for 2 kinds of questions, 5 for each19 for (int i = 1; i &lt;= 2; i++) &#123;20 for (int j = 1; j &lt;= 5; j++) &#123;21 // Random an index in the possible list22 int randomImgIndex = random.nextInt(preventDup.size() - 1);23 // Random which kind of images we want24 int randomTag = random.nextInt(4);25 // Get the random image numbers26 int randomImg = preventDup.get(randomImgIndex);27 // Add to the backend image names list (like \"24-2\")28 imageNamesBackend.add(randomImg + \"-\" + randomTag);29 // For different image kinds, add different image names for frontend30 switch (randomTag) &#123;31 case 0: imageNamesFrontend.add(randomImg + \"-ori.jpg\"); break;32 case 1: imageNamesFrontend.add(randomImg + \"-ord.jpg\"); break;33 case 2: imageNamesFrontend.add(randomImg + \"-gan.png\"); break;34 case 3: imageNamesFrontend.add(randomImg + \"-res.png\"); break;35 default: break;36 &#125;37 // Remove this image from the possible image names list38 preventDup.remove(randomImgIndex);39 &#125;40 &#125;41 &#125;42 43 // A method to get backend image names44 public List&lt;String&gt; getImageNamesBackend() &#123;45 return imageNamesBackend;46 &#125;4748 // A method to get frontend image names49 public List&lt;String&gt; getImageNamesFrontend() &#123;50 return imageNamesFrontend;51 &#125;5253&#125; 这里使用了一个 preventDup 的 TreeList 防止在101 * 4张图片的随机过程中出现两张都拥有同样黑白信息的图片（即那101的随机中出现重复）。随后我们把随机出来的信息加入了两个不同的List中，分别为后端和前端使用。 我们先说前端，上述方法中的变量imageNamesFrontend会被 mainController 使用。在那里面，这个List会被整个传递到Thymeleaf这个前端中。注意使用 @Autowired 来注入Service，代码如下: 1@Autowired2private RandomGenerateImageNames rgin;34@GetMapping(value = \"/surveyForm\")5public String formPage(Model model) &#123;6 ......7 // init 10 random image names8 rgin.initRandomNames();9 10 // Add info into the index web page11 model.addAttribute(\"imageNamesFrontend\", rgin.getImageNamesFrontend());12 model.addAttribute(\"RealText\", \"It is Real.\");13 model.addAttribute(\"FakeText\", \"It is Colourised by AI.\");14 ......15&#125; 注意到这里我们使用的是@GetMapping，关于REST的信息，请自行查阅互联网。 随后在Thymeleaf中使用 th:each 这个方式，我们可以循环这个List，代码如下： 1&lt;ul th:each=\"imageNameFrontend,Stat : $&#123;imageNamesFrontend&#125;\"&gt;2 &lt;li&gt;3 &lt;img th:src=\"@&#123;'/img/'+$&#123;imageNameFrontend&#125;&#125;\"&gt;&lt;br th:if = \"$&#123;Stat.count&#125; &lt;= 5\"&gt;4 &lt;input type=\"radio\" th:if = \"$&#123;Stat.count&#125; &lt;= 5\" th:name=\"q + ($&#123;Stat.count&#125;)\" th:id=\"'q' + ($&#123;Stat.count&#125;) + '-0'\" th:value=\"'q' + ($&#123;Stat.count&#125;) + 'Real'\" required=\"required\" th:text = \"$&#123;RealText&#125;\"&gt;&lt;br th:if = \"$&#123;Stat.count&#125; &lt;= 5\"&gt;5 &lt;input type=\"radio\" th:if = \"$&#123;Stat.count&#125; &lt;= 5\" th:name=\"q + ($&#123;Stat.count&#125;)\" th:id=\"'q' + ($&#123;Stat.count&#125;) + '-1'\" th:value=\"'q' + ($&#123;Stat.count&#125;) + 'False'\" required=\"required\" th:text = \"$&#123;FakeText&#125;\"&gt;&lt;br th:if = \"$&#123;Stat.count&#125; &lt;= 5\"&gt;6 &lt;/li&gt;7 &lt;/ul&gt; 注意到这里我们不仅使用了 th:each 这个Thymeleaf语法，还使用了多个类似的关键词： th:each=&quot;imageNameFrontend, Stat : ${imageNamesFrontend}&quot;：这个 Stat 会自动为我们记录循环的情况，所以在后面的代码中我们可以用 ${Stat.count} 直接获得循环的次数。 th:if = &quot;${Stat.count} &lt;= 5&quot;： 可以直接做出判断，判断为真，则显示这个元素，否则不显示。 th:id, th:value, th:text : 都是可以通过Java代码为前端填充的信息。 重新从主入口运行Spring Boot，浏览器打开localhost:8080/surveyForm （注意我的controller里@GetMapping的value），看看现在的前端是什么样的了呢？ 可以看出，前端很好的获得了后端传递的指，随机了图片，并创建了列表。 总结来看，MainController，RandomGenerateImageNames 和 index.html 这三者的关系如下： 下一篇，我们会尝试使用mongoDB做为数据库，在应用和数据库之间互相传递数据。","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://yoursite.com/tags/SpringBoot/"},{"name":"MongoDB","slug":"MongoDB","permalink":"http://yoursite.com/tags/MongoDB/"},{"name":"Docker","slug":"Docker","permalink":"http://yoursite.com/tags/Docker/"},{"name":"Thymeleaf","slug":"Thymeleaf","permalink":"http://yoursite.com/tags/Thymeleaf/"}]},{"title":"2018年总结","slug":"11","date":"2019-01-02T21:37:33.000Z","updated":"2019-10-08T16:49:53.193Z","comments":true,"path":"2019/01/02/11/","link":"","permalink":"http://yoursite.com/2019/01/02/11/","excerpt":"","text":"2018年一转眼就成为了过去式，向过去挥手的同时，我们也要着眼当下，翘望未来。 记录自己的2018年 经手过的主要项目和作业 Chrome自动登录校园网插件 自己的Hexo博客和网站 BM25信息获取实践 华为云问答机器人 深度学习为照片上色 模拟博彩公司分布式网站 几个重要的点 PHP JAVA 深度学习 分布式系统 Spring boot Docker 入手设备 MacBook Pro 2017 iPhone 8 Dell 某型号显示器（过于廉价不表） Xbox one Nintendo Switch 树莓派 出手设备 Oneplus 5 MacBook 2016 LG 144Hz屏幕 Sony a6000相机 最喜爱产品MacBook Pro 2017 Touch Bar ，一整年的使用后总结就是一个词，好用。虽然遇到过短暂的变砖，但是苹果覆盖全球的售后服务还是顶级的，免费为我更换了主板。在使用了无数部笔记本之后，我也似乎终于找到了一台能够长期使用的唯一的它。尽管年中推出的2018版性能有了大幅提升，但是我也并非性能需求者，2017版足以符合我的要求。 最喜爱主机游戏荒野大镖客救赎2 及 塞尔达荒野之息，两部作品都是顶级水准。巅峰级的开放世界游戏带来无与伦比的游戏体验。实在很难在两者件做出抉择，大镖客2发布于2018，抢鲜游玩并且肝到忘记时间。荒野之息虽然发布在2017年但是我18年才得以玩到。（顺便再吐槽一下Switch平台大作数量） 最喜爱电脑游戏FM2019，很难做出抉择，要从所有2018年开始玩的电脑游戏中选择的话，我选择FM19。尽管和往年相比变化不大，但是多处细节和整体UI的调整还是为众多足球迷带来了不错的体验。率领狼队英超三连冠还是乐趣十足。年末开始玩怪物猎人，至今还在开荒，感觉也非常优秀，可惜游玩时间不长。优秀独立作品会给Astronner，风格独特有趣，太空经营模拟令人着迷，可惜游戏内容偏少，BUG较多，联机不稳定。 去过的最棒的地方爱尔兰玩了一遍的我表示小地方Dursey Island是我今年去过的最棒的地方。和同学一起“说走就走”的旅行，欧洲大陆的最西边质朴的乡村令人着迷。B&amp;B房间干净舒适；大西洋，羊，牛，青草绿底，空无一人的岛上，我就是两个小时的岛主。 最佳电影电视剧心目中的18年最佳电影应该会给三块广告牌，这个世界没有绝对的正确和错误，只有不同的人站在不同的立场做着不同的事，说着不同的话。在我的眼中，这部电影就是对这个政治正确横行的世界最好的剖析。最佳电视剧给到硅谷第四季，Ricard终成大器，程序员的搞笑傻屌故事麻烦不要停下！（抱紧HBO爸爸大腿） 2019年，希望大家都是最棒的那个娃！","categories":[],"tags":[]},{"title":"Spring Boot踩坑及解决两则（附Socket、JavaRMI、jUDDI实例）","slug":"10","date":"2018-11-21T23:20:23.000Z","updated":"2019-10-08T16:49:51.305Z","comments":true,"path":"2018/11/21/10/","link":"","permalink":"http://yoursite.com/2018/11/21/10/","excerpt":"","text":"最近重新上了一门分布式系统课，还是学到不少东西，从socket到JavaRMI到SOAP (jUDDI) 到RESTful都做了尝试。课最后有一个大作业，我们组员打算做一个bookie公司的网站。于是乎我就想着能走Spring Boot + Maven这一套，毕竟非常高大上（后面还可以docker化）。但是过程中还是踩了两个小雷，折腾了好一会，查了查也没有很好的说法，这里记录一下。 “Could not autowire”运行时报错： 1***************************2APPLICATION FAILED TO START3***************************45Description:67Field lbs in com.example.controller.BookieController required a bean of type &#39;com.example.service.LocalBookieService&#39; that could not be found.89The injection point has the following annotations:10 - @org.springframework.beans.factory.annotation.Autowired(required&#x3D;true)111213Action:1415Consider defining a bean of type &#39;com.example.service.LocalBookieService&#39; in your configuration. idea在controller中的@Autowire后实例上显示 1Could not autowire. No beans of &#39;LocalBookieService&#39; type found. 这很有可能是因为你的Service类，如在我的情况中，“LocalBookieService”中没有加上“@Service”，加上再尝试即可。 1@Service2public class LocalBookieService implements BookieService &#123;3 ... ...4&#125; 如果你加了运行依然出错，说明你的文件结构不对，此时有两种方法解决问题，一种是在主Application类中添加新的“scanBasePackages”，如： 1@SpringBootApplication(scanBasePackages&#x3D;&#123;&quot;com.example&quot;&#125;)2public class DsBookieBusinessApplication &#123;3 public static void main(String[] args) &#123;4 SpringApplication.run(DsBookieBusinessApplication.class, args);5 &#125;6&#125; 另一种则是更改文件结构，介于前者一，后期添加更改麻烦，二，不符合简洁的原则，建议使用后者，将除Application外的文件夹和Application放在同一个包内，使他们同级，即可。 thymeleaf前端回传数据thymeleaf回传数据是在controller里使用： 1@ModelAttribute(value &#x3D; &quot;authinfo&quot;) AuthInfo authInfo 这样的参数得到的。这样的写法java会从前端页面的object里自动找到对应的名字并获得数据。但是我尝试时发现数据怎么都是null，最重要的是我也没想明白怎么传递的数据。最后发现thymeleaf会自动的把名字一样的数据提出来然后自动的生成一个实例，在我的例子里，前端是这样： 1&lt;label for&#x3D;&quot;email&quot;&gt;Email:&lt;&#x2F;label&gt;2&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;email&quot; id&#x3D;&quot;email&quot;&#x2F;&gt;3&lt;label for&#x3D;&quot;password&quot;&gt;Password:&lt;&#x2F;label&gt;4&lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;password&quot; id&#x3D;&quot;password&quot;&#x2F;&gt;5&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;submit&quot;&gt; AuthInfo类是这样： 1public class AuthInfo &#123;2 private String email;3 private String password;4 ... ...5&#125; 那么当用户点击summit按钮，前端就会自动的把”email“和”password“弄成一个AuthInfo实例供后端使用。然而，为了实现这些，后端的俗称为“domain”的类，比如这里的“AuthInfo”必须得有setter （getter一般大家都加了吧），我是用的之前的代码，先前使用的是构造器，于是乎一直得不到值，加上setter即可。 放几个先前作业的链接最后放几个先前分布式系统作业的链接，都是基于同一个简单的quotation服务，如果有类似的问题也可以留言提问。 Socket java实现分布式服务：https://github.com/TonyZhang1002/Socket-QuotationService-Sample JavaRMI实现：https://github.com/TonyZhang1002/JavaRMI-QuotationService-Sample jUDDI实现：https://github.com/TonyZhang1002/jUDDI-QuotationService-Sample RESTlet实现：https://github.com/TonyZhang1002/RESTlet-QuotationService-Sample","categories":[],"tags":[{"name":"issues","slug":"issues","permalink":"http://yoursite.com/tags/issues/"},{"name":"Project","slug":"Project","permalink":"http://yoursite.com/tags/Project/"},{"name":"springboot","slug":"springboot","permalink":"http://yoursite.com/tags/springboot/"}]},{"title":"北京生存记录（2018年2月 至 2018年6月）","slug":"8","date":"2018-06-27T23:00:00.000Z","updated":"2019-10-08T16:49:52.707Z","comments":true,"path":"2018/06/28/8/","link":"","permalink":"http://yoursite.com/2018/06/28/8/","excerpt":"","text":"在北京过的最后一个学期不能说是一帆风顺，总体来讲课程不多，学业也不繁忙，但是还是挺充实的。最后开开心心地吃了几顿大餐，准备着去迎接爱尔兰都村的土豆了（捂脸笑），我真的第一次这么热爱美食，中华美食超棒！（大声喊叫）介于第一次写生存记录，就分着部分写，以后有更好的写法再说。 吃的下馆子真的比以前频繁了，介于大家越来越不想吃楼底食堂，我们开启了四处吃吃吃模式，宿舍门口的面馆和鸡公煲成了我们经常光顾的主要对象。小面馆的鸡杂面好好吃，可惜忘了拍张照了（就没拍过几次食物啊喂！）。鸡公煲超干净（就一家小店来说），食物也不错，就是咸了点。然后就是几家烧烤店，南方人觉得还是吃不太惯，味道实在太大，而且热气的很，第二天鼻子就会有几率挂彩（哭述）。火锅店 || 串串店和烧烤情况一样，吃完必定洗衣服，并且太辣太辣，我要养生啊啊啊！合生汇去过好多次，里面的鹅夫人好吃，粤菜做的非常正宗，鸳鸯奶茶甜中带苦，杨枝甘露芒果味十足，更不要说招牌烧鹅了，总结就是一个棒字。印象比较深的还有最后散伙饭吃的鱼火锅，番茄锅味道挺独特的，煮出来的肉都带着一股子蕃茄味哈哈哈哈哈～吃的能想起来的就这些啦，照片什么的真的找不到啊，以后一定要多拍照片！（哭着喊道）btw，以后要自己做饭了，超级大厨正在连接至服务器！ 住的这个学期我已经彻底不想打扫整理房间了，垃圾随机的散落在寝室地上，桶子常年缺乏清理，房间还时不时有奇♂怪的味道。但马上要离开这里的心态总如灾厄盖农一样给我来了个死亡缠绕，说到底还是懒，嗯。其他也没什么好说的，太大变化是没有的，东西还留了不少在房间因为我实在拿不回去了啊天…… 学的这一段时间最主要就是在弄软件杯比赛的项目吧，就是一个智能问答系统，我主要负责了前端的设计，问题生成和最后初赛视频的制作。感觉还是收获了不少，课程中还有一门信息获取，感觉对于我们项目也起到了一个促进的作用。课程上还有软件管理和系统验证设计，都属于理论性比较强，实操性较弱的课程。70%的时间在写python，30%的时间在写HTML+JS+CSS。后者很累，眼睛都会看花啊。还花了整整一个礼拜吧，日夜不停的做视频，PR感觉入了个门吧。也很累，也会花眼睛（FBI warning），视频后期都是甘地，敬佩敬佩！ 玩的整个学期前大半段时间还是彩六加吃鸡吧（说鸡就带吧，文明去**）。彩六的运营还是一如即往的优秀，新赛季两个新干员中的Alibi很有创意，阿育棒棒棒！赛季末的冠军赛也很棒，但是新赛季开始办联赛后就没怎么看了，有时间再关注关注吧。吃鸡没有人一起我是绝对不会玩的，游戏整体体验实在是太糟糕，某次更新后载具居然会莫名旋转，更不要说一直以来难以根除的各种bug和延迟，最近据说又出了新·赚钱手段，为大PUBG上香为敬！E3结束之后我还是难忍诱惑，买了个switch，半年前还在瞧不起塞尔达的我拿到switch后喊起了真香。荒野之息不愧为17年年度最佳游戏。下一篇blog可能会写写我对塞尔达传说·荒野之息的感想吧。 总体就这样子，我愉悦的撤离了北京城。说实话三年的时光并没有让我对北京留下什么依恋，这座城市充满着一股难以言说的分离感，大量的外来务工人员，被吐槽炸了的天气，糟糕的卫生环境，还有淡泊的人情味，让我永远感觉他庞大却空虚，庄严且高傲，华贵又粗糙。这是一座有两个位面的城市，街道的这头是高楼大厦，街道的那头则是矮破的老旧建筑；马路的中间小轿车川流不息，马路的旁边，跨过泥泞的小道是“**人口”的小快递店门面。我眼中的一切从未如此反差鲜明，离开他的我没有犹豫。 “那就这样吧，再爱我有缘的话。” 再见北京，都柏林再见。","categories":[],"tags":[{"name":"survival recording","slug":"survival-recording","permalink":"http://yoursite.com/tags/survival-recording/"},{"name":"Beijing","slug":"Beijing","permalink":"http://yoursite.com/tags/Beijing/"}]},{"title":"pip3安装gensim 问题解决","slug":"7","date":"2018-04-27T23:00:00.000Z","updated":"2019-10-08T16:49:52.123Z","comments":true,"path":"2018/04/28/7/","link":"","permalink":"http://yoursite.com/2018/04/28/7/","excerpt":"","text":"最近在做自动QA对生成时，跑同学的代码需要安装gensim，但是输入： 1pip3 install gensim 之后，速度慢，而且会报错： 1Traceback (most recent call last):2 File &quot;&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.6&#x2F;lib&#x2F;python3.6&#x2F;site-packages&#x2F;pip&#x2F;_vendor&#x2F;requests&#x2F;packages&#x2F;urllib3&#x2F;response.py&quot;, line 232, in _error_catcher3 yield4 File &quot;&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.6&#x2F;lib&#x2F;python3.6&#x2F;site-packages&#x2F;pip&#x2F;_vendor&#x2F;requests&#x2F;packages&#x2F;urllib3&#x2F;response.py&quot;, line 314, in read5 data &#x3D; self._fp.read(amt)6 File &quot;&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.6&#x2F;lib&#x2F;python3.6&#x2F;site-packages&#x2F;pip&#x2F;_vendor&#x2F;cachecontrol&#x2F;filewrapper.py&quot;, line 60, in read7 data &#x3D; self.__fp.read(amt)8 File &quot;&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.6&#x2F;lib&#x2F;python3.6&#x2F;http&#x2F;client.py&quot;, line 449, in read9 n &#x3D; self.readinto(b)10 File &quot;&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.6&#x2F;lib&#x2F;python3.6&#x2F;http&#x2F;client.py&quot;, line 493, in readinto11 n &#x3D; self.fp.readinto(b)12 File &quot;&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.6&#x2F;lib&#x2F;python3.6&#x2F;socket.py&quot;, line 586, in readinto13 return self._sock.recv_into(b)14 File &quot;&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.6&#x2F;lib&#x2F;python3.6&#x2F;ssl.py&quot;, line 1009, in recv_into15 return self.read(nbytes, buffer)16 File &quot;&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.6&#x2F;lib&#x2F;python3.6&#x2F;ssl.py&quot;, line 871, in read17 return self._sslobj.read(len, buffer)18 File &quot;&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.6&#x2F;lib&#x2F;python3.6&#x2F;ssl.py&quot;, line 631, in read19 v &#x3D; self._sslobj.read(len, buffer)20socket.timeout: The read operation timed out2122During handling of the above exception, another exception occurred:2324Traceback (most recent call last):25 File &quot;&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.6&#x2F;lib&#x2F;python3.6&#x2F;site-packages&#x2F;pip&#x2F;basecommand.py&quot;, line 215, in main26 status &#x3D; self.run(options, args)27 File &quot;&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.6&#x2F;lib&#x2F;python3.6&#x2F;site-packages&#x2F;pip&#x2F;commands&#x2F;install.py&quot;, line 335, in run28 wb.build(autobuilding&#x3D;True)29 File &quot;&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.6&#x2F;lib&#x2F;python3.6&#x2F;site-packages&#x2F;pip&#x2F;wheel.py&quot;, line 749, in build30 self.requirement_set.prepare_files(self.finder)31 File &quot;&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.6&#x2F;lib&#x2F;python3.6&#x2F;site-packages&#x2F;pip&#x2F;req&#x2F;req_set.py&quot;, line 380, in prepare_files32 ignore_dependencies&#x3D;self.ignore_dependencies))33 File &quot;&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.6&#x2F;lib&#x2F;python3.6&#x2F;site-packages&#x2F;pip&#x2F;req&#x2F;req_set.py&quot;, line 620, in _prepare_file34 session&#x3D;self.session, hashes&#x3D;hashes)35 File &quot;&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.6&#x2F;lib&#x2F;python3.6&#x2F;site-packages&#x2F;pip&#x2F;download.py&quot;, line 821, in unpack_url36 hashes&#x3D;hashes37 File &quot;&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.6&#x2F;lib&#x2F;python3.6&#x2F;site-packages&#x2F;pip&#x2F;download.py&quot;, line 659, in unpack_http_url38 hashes)39 File &quot;&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.6&#x2F;lib&#x2F;python3.6&#x2F;site-packages&#x2F;pip&#x2F;download.py&quot;, line 882, in _download_http_url40 _download_url(resp, link, content_file, hashes)41 File &quot;&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.6&#x2F;lib&#x2F;python3.6&#x2F;site-packages&#x2F;pip&#x2F;download.py&quot;, line 603, in _download_url42 hashes.check_against_chunks(downloaded_chunks)43 File &quot;&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.6&#x2F;lib&#x2F;python3.6&#x2F;site-packages&#x2F;pip&#x2F;utils&#x2F;hashes.py&quot;, line 46, in check_against_chunks44 for chunk in chunks:45 File &quot;&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.6&#x2F;lib&#x2F;python3.6&#x2F;site-packages&#x2F;pip&#x2F;download.py&quot;, line 571, in written_chunks46 for chunk in chunks:47 File &quot;&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.6&#x2F;lib&#x2F;python3.6&#x2F;site-packages&#x2F;pip&#x2F;utils&#x2F;ui.py&quot;, line 139, in iter48 for x in it:49 File &quot;&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.6&#x2F;lib&#x2F;python3.6&#x2F;site-packages&#x2F;pip&#x2F;download.py&quot;, line 560, in resp_read50 decode_content&#x3D;False):51 File &quot;&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.6&#x2F;lib&#x2F;python3.6&#x2F;site-packages&#x2F;pip&#x2F;_vendor&#x2F;requests&#x2F;packages&#x2F;urllib3&#x2F;response.py&quot;, line 357, in stream52 data &#x3D; self.read(amt&#x3D;amt, decode_content&#x3D;decode_content)53 File &quot;&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.6&#x2F;lib&#x2F;python3.6&#x2F;site-packages&#x2F;pip&#x2F;_vendor&#x2F;requests&#x2F;packages&#x2F;urllib3&#x2F;response.py&quot;, line 324, in read54 flush_decoder &#x3D; True55 File &quot;&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.6&#x2F;lib&#x2F;python3.6&#x2F;contextlib.py&quot;, line 99, in __exit__56 self.gen.throw(type, value, traceback)57 File &quot;&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.6&#x2F;lib&#x2F;python3.6&#x2F;site-packages&#x2F;pip&#x2F;_vendor&#x2F;requests&#x2F;packages&#x2F;urllib3&#x2F;response.py&quot;, line 237, in _error_catcher58 raise ReadTimeoutError(self._pool, None, &#39;Read timed out.&#39;)59pip._vendor.requests.packages.urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host&#x3D;&#39;files.pythonhosted.org&#39;, port&#x3D;443): Read timed out. 经过尝试，应该是镜像节点太慢了，于是使用： 1pip3 install -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple gensim 更换至锅内镜像，即可完成安装。","categories":[],"tags":[{"name":"issues","slug":"issues","permalink":"http://yoursite.com/tags/issues/"},{"name":"pip3","slug":"pip3","permalink":"http://yoursite.com/tags/pip3/"},{"name":"python3","slug":"python3","permalink":"http://yoursite.com/tags/python3/"}]},{"title":"手记-智能QA对问答系统","slug":"6","date":"2018-03-21T00:00:00.000Z","updated":"2019-10-08T16:49:52.945Z","comments":true,"path":"2018/03/21/6/","link":"","permalink":"http://yoursite.com/2018/03/21/6/","excerpt":"","text":"项目说明这个项目是2018年软件杯的赛题，赛事题目在这里： http://www.cnsoftbei.com/bencandy.php?fid=151&amp;aid=1612 题目要求是为华为云设计实现一个智能QA对问答系统。 从一月决定参赛到三月21号，我们已经大致确定了方向——使用NLP和规则做文本处理，SQL做数据储存，网页为前端。这篇文章主要记录我个人的项目创建过程和实现思路。 Github链接：https://github.com/BDIC/Intelligent-QA-System 系统设计简述系统总体分为后端和前端，在后端，我们需要使用脚本提取大量说明文本中的QA对并储存在SQL中，同时我们需要设计一个网页使工作人员可以增删查改这些QA对。在前端，我们需要能够获得用户问题，并从SQL中提取正确的答案返回用户。 大体框架如图： 难点主要在QA对自动生成和用户问题匹配这两点上， 三月内先打算先处理QA对自动生成的问题。 QA对自动生成目前打算先使用基本的NLP和规则来自动生成问题。PYLTP是哈工大的一个开源中文文本处理python库，我们目前需要用到其中的中文分词和中文词性标注功能。我们目前只对页面进行问题自动生成处理，使用华为云帮助中心每个页面顶部的结构说明（多个标签）为每个页面生成单个问题。 处理方法为： 分标签这一步可能另外一名组员已经帮忙处理了。 1#分隔标签2def splitor(sentence&#x3D;&#39;帮助中心 &gt; 数据仓库服务 &gt; 购买指南 &gt; 续费&#39;):3 labels_list &#x3D; list(sentence.split(&#39; &gt; &#39;))4# for label in labels_list:5# print(label + &#39; &#39;, end &#x3D; &#39;&#39;)6 return labels_list 筛除对问题生成无用的标签有些标签对问题生成美元意义，例如第一个永远是“帮助中心”。 另外如“概览”，“FAQ”这样的文字不太可能出现在问题中。 1#筛选有用数据2def filter(List):3 useless_labels &#x3D; [&#39;简介&#39;,&#39;帮助中心&#39;,&#39;概览&#39;,&#39;产品简介&#39;,&#39;价格说明&#39;,&#39;快速入门&#39;,&#39;FAQ&#39;,&#39;用户指南&#39;,&#39;概述&#39;,&#39;购买指南&#39;]4 nList &#x3D; list()5 for label in List:6 if label not in useless_labels:7 nList.append(label)8 for label in nList:9 print(label + &#39; &#39;, end &#x3D; &#39;&#39;)10 print()11 return nList; 使用PYLTP的分词和词性标注需要引用PYLTP库和下载模型。 1#分词2def segmentor(sentence&#x3D;&#39;&#39;):3 segmentor &#x3D; Segmentor() # 初始化实例4 segmentor.load(&#39;&#x2F;Users&#x2F;zhangqinyuan&#x2F;Downloads&#x2F;ltp_data_v3.4.0&#x2F;cws.model&#39;) # 加载模型5 words &#x3D; segmentor.segment(sentence) # 分词6 # 可以转换成List 输出7 words_list &#x3D; list(words)8 segmentor.release() # 释放模型9 return words_list1011#获取分词后词性12def posttagger(words):13 postagger &#x3D; Postagger() # 初始化实例14 postagger.load(&#39;&#x2F;Users&#x2F;zhangqinyuan&#x2F;Downloads&#x2F;ltp_data_v3.4.0&#x2F;pos.model&#39;) # 加载模型15 postags &#x3D; postagger.postag(words) # 词性标注16# for word,tag in zip(words,postags):17# print (word+&#39;&#x2F;&#39;+tag)18 postags_list &#x3D; list(postags)19 postagger.release() # 释放模型20 return postags_list 生成问题这一步最为重要，基于规则我们目前考虑了以下几种情况： 一、假如只有一个有用标签或最后一个标签包含“简介”，则直接使用“什么是… …？”来生成问题。如：“帮助中心 &gt; 机器学习服务”。 二、假如最后一个标签的开头是疑问词，则不需要生成问题。如：“帮助中心 &gt; 机器学习服务 &gt; 什么是机器学习服务”。 三、假如最后一个标签是“概述”或者“产品概述”，则用第一个标签和倒数第二个标签生成问题。如：“帮助中心 &gt; 机器学习服务 &gt; 产品介绍 &gt; 产品概述”。 四、假如最后一个标签在例外情况（动词做定语开头）之中，则用“… …有哪些？”生成问题。如：“帮助中心 &gt; 机器学习服务 &gt; 使用限制”。 五、假如最后一个标签的最后一个词为管理，则用“怎么管理… …?”生成问题。如：“帮助中心 &gt; 云容器引擎 &gt; 用户指南 &gt; 操作指南 &gt; 存储管理”。 六、假如最后一个标签以动词开头，使用“怎么… …”来生成问题。如：“帮助中心 &gt; 镜像服务 &gt; 用户指南 &gt; 管理 &gt; 共享镜像”。 七、假如最后一个标签为”与… …”，使用第一个标签和最后一个标签形成问句。如：“帮助中心 &gt; 镜像服务 &gt; 用户指南 &gt; 管理 &gt; 与容器的关系” 八、假如最后一个标签以动词、形容词开头，使用“… …有哪些”来生成。如：“帮助中心 &gt; 镜像服务 &gt; 用户指南 &gt; 管理”。 目前存在这几种问题有待解决： 一、仍然有些动词做定语开头的标签没有添加进情况四中。 二、有些标签以名词、形容词开头但是不能用“… …有哪些”来问。如“可视化”，“场景说明”。解决方法有待研究。 三、某些标签以其他词开头，如英文。解决方法有待研究。","categories":[],"tags":[{"name":"Project","slug":"Project","permalink":"http://yoursite.com/tags/Project/"},{"name":"NLP","slug":"NLP","permalink":"http://yoursite.com/tags/NLP/"},{"name":"Notes","slug":"Notes","permalink":"http://yoursite.com/tags/Notes/"}]},{"title":"openWRT+shadowsocks+树莓派 翻出去&翻回来？（简单向教程）","slug":"5","date":"2018-02-01T00:00:00.000Z","updated":"2019-10-08T16:49:51.964Z","comments":true,"path":"2018/02/01/5/","link":"","permalink":"http://yoursite.com/2018/02/01/5/","excerpt":"","text":"设想一开始想法很简单，学校网络环境很差，然后就想着家里网络环境既然很好不如弄个Raspberry PI（树莓派）装上shadowsocks，然后学校那边连接着家里的树莓派玩游戏。以后假如出国了也可以连回来使使网易云音乐，看看买了会员的足球比赛什么的 #捂脸逃，然后说干就干，买了个树莓派。 后来树莓派弄好之后，外面确实可以通过shadowsocks连接进来了，但是又闲得蛋疼想把家里的透明代理也一块弄了，然后又懒得折腾树莓派做路由器，就非常阔绰的买了个刷好的openWRT路由。 所以最后效果是，家庭内可以通过透明代理访问外网，然后外面可以通过shadowsocks回到家庭网络，下面分部分 简单 写一下做法。 这个教程只是个简单的流程说明，具体怎么操作因为时间比较久了不太记得了，而且每个人网络情况也不同，就不写了，有问题可以评论去写下 树莓派+shadowsocks+内网渗透设置好树莓派首先我们当然要先设置好树莓派，使得其他设备能够通过ssh连接，这里就不详细写了，大家自己去找吧，我这里使用的是商家帮忙刷好的Raspbian，这是个基于Debian的系统，之所以选择这个是因为比较熟悉Debian，所以大家也可以根据自己的情况选择系统。 安装shadowsocks这边我使用的是Github上某libev版本的一键安装脚步，具体可以自行移步谷歌搜索，可能编译的时候会出很多错，这里建议大家把/etc/issue里面的Raspbian改成Debian，没什么影响而去日后也可以改回来。 脚步安装完成之后ss-server可能无法解析地址，这里我们在raspi-config的设置里勾上”Wait for Network at Boot”。 验证是否安装成功的方法也很简单，在路由器的设置里固定树莓派分配的dhcp，比如说是192.168.0.111吧，然后手机或者电脑在内网中尝试连接192.168.0.111的ss服务即可。 设置内网渗透内网能够使用shadowsocks之后问题就来了，外网怎么使用呢？我们知道如今宽带基本不会提供公网IP的，于是我们可以，一，使用花生壳的内网渗透，二，自己设置内网渗透。 不想折腾的就试试一吧，但是还是二吧（你都到这一步了诶！而且花生壳很坑，你试一下就知道了。 那么我这边尝试的就是一种叫frp的内网渗透技术，这个需要有一个有公网IP的vps哦！教程在此 。 但是这个教程有两个问题： 一是服务端应该使用frps_full.ini好像更方便些，然后我们加上自己的shadowsocks服务端口，大概这样（554是辖取的，以后外网连接时使用的端口）： 1[ss]2type &#x3D; tcp3auth_token &#x3D; M4P2xsH6RuUkbP9d4bind_addr &#x3D; 0.0.0.05listen_port &#x3D; 554 然后树莓派这边也要加上对应的代码（假设你刚才搭建ss的端口时443）： 1[ss]2type &#x3D; tcp3local_port &#x3D; 4434remote_port &#x3D; 554 这里建议大家开启特权模式哦。 二是这个教程里没有说明怎么后台运行和自动重启，这里我们下载一个supervisor： 1sudo apt install supervisor 然后在/etc/supervisor/conf.d下新建一个配置文件（啥啥啥.conf），输入这些： 1[program:frp]2command &#x3D; &#x2F;home&#x2F;pi&#x2F;frp&#x2F;frp_0.11.0_linux_arm&#x2F;frpc -c &#x2F;home&#x2F;pi&#x2F;frp&#x2F;frp_0.11.0_linux_arm&#x2F;frpc.ini3autostart &#x3D; true command 后面的代码是自己运行时候执行的代码～ 最后，我们可以这样： 1# 重启supervisor2sudo systemctl restart supervisor3# 查看supervisor运行状态4sudo supervisorctl status 然后可以后台运行啦，但是假如supervisor也挂了怎么办呢？我们可以用Debian的Crontab命令来指定时间 执行重启supervisor的服务啦！教程在此 。 如此一来我们就可以通过内网渗透在外网访问树莓派的ss服务啦，试试手机使用SIM卡网络，使用vps的公网IP和frp的远程端口（比如我这就是554），看看能不能上网吧！ openWRT+ss+dnsmasq实现透明代理这个方面网上教程一大堆，我参考的是这个，教程点我 。 教程后面还有进阶教程，整体难度不高，我买的是某宝上的刷好openWRT的路由器，整体过程非常简单。 当然你也可以把树莓派弄成路由，但是感觉挺麻烦的。 完成之后当你在外网通过ss连接回来，还可以透明代理访问被墙的网站哦！还能避开dns污染哦，美滋滋！ 最后最后的问题是你需要一个比较不错的vps来实现这些功能！ 然后整个弄下来之后感觉还是蛮舒服的，有什么其他问题欢迎评论区留言哦~","categories":[],"tags":[{"name":"tutorial","slug":"tutorial","permalink":"http://yoursite.com/tags/tutorial/"},{"name":"VPS","slug":"VPS","permalink":"http://yoursite.com/tags/VPS/"},{"name":"openWRT","slug":"openWRT","permalink":"http://yoursite.com/tags/openWRT/"},{"name":"shadowsocks","slug":"shadowsocks","permalink":"http://yoursite.com/tags/shadowsocks/"},{"name":"raspberry","slug":"raspberry","permalink":"http://yoursite.com/tags/raspberry/"}]},{"title":"iTerm2+Oh My Zsh【制造好看的terminal】","slug":"4","date":"2018-01-25T00:00:00.000Z","updated":"2019-10-08T16:49:52.320Z","comments":true,"path":"2018/01/25/4/","link":"","permalink":"http://yoursite.com/2018/01/25/4/","excerpt":"","text":"终端总是程序员们使用电脑时绕不开的东西，iTerm2是一款优秀的终端模拟器，提供各种方便的功能，这个教程就是我使用iTerm2加Oh My Zsh制作的一个自己觉得颜值还阔以的终端～ 先上最终效果图 下载安装iTerm2去 iTerm2官网 下也行，用 homebrew 下也行，看个人喜好。 在iTerm2中安装Oh My Zsh按照 Oh My Zsh 的介绍，在iTerm2中执行： 1sh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;master&#x2F;tools&#x2F;install.sh)&quot; 或： 1sh -c &quot;$(wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;master&#x2F;tools&#x2F;install.sh -O -)&quot; 即可安装。 安装PowerlinePoweline官网 提供教程，但是假如没有，先用homebrew安装个phython，然后安装pip： 1sudo easy_install pip pip可以使用之后，执行： 1pip install powerline-status 即可安装powerline。 这个地方我之前老是无法安装，尝试之后在“install powerline-status”中间添加了“–user”才完成，各位如果不行可以试一试。 下载、安装字体库假如这个时候就去更改主题的话就会发现会有很多东西会用问号来显示，因为我们需要一些特殊的、“for powerline”的字体。 Github链接在这：Poweline’s fonts 下载执行： 1git clone https:&#x2F;&#x2F;github.com&#x2F;powerline&#x2F;fonts.git --depth&#x3D;1 安装1# install2cd fonts3.&#x2F;install.sh4# clean-up a bit5cd ..6rm -rf fonts 配置安装完字体库之后，把iTerm 2的设置里的Profile中的Text 选项卡中里的Regular Font和Non-ASCII Font的字体都设置成 ”for Powerline“ 的字体，我这里设置的字体是14pt Meslo LG S DZ Regular for Powerline。然后直接编辑~/.zshrc中的ZSH_THEME=&quot;agnoster&quot;就可以改变主题，这里 还有全部主题预览，我使用的是agnoster。我们还可以在iTerm2的Preferences——Profiles——colors——Color Presets——Solarized Dark设置终端配色。在window这里也可以更改窗口透明度和窗口出现的地方和大小。最后在keys里我们可以在加入一个全局的显示/隐藏热键，方便随时使用。 之后当然还有很多操作大家可以自己研究啦！ 这篇tutorial就写到这里吧，欢迎下面讨论哦～","categories":[],"tags":[{"name":"Mac","slug":"Mac","permalink":"http://yoursite.com/tags/Mac/"},{"name":"tutorial","slug":"tutorial","permalink":"http://yoursite.com/tags/tutorial/"}]},{"title":"一些看过的推理作品推荐","slug":"3","date":"2018-01-16T00:00:00.000Z","updated":"2019-12-18T10:42:33.165Z","comments":true,"path":"2018/01/16/3/","link":"","permalink":"http://yoursite.com/2018/01/16/3/","excerpt":"","text":"特别喜欢看推理类的作品（或者说侦探类吧）是因为一方面很有趣啦，看起来读起来都很有感觉，另一方面就是多多少少能体会逻辑思考的乐趣，体会命运的无常，人与人之间的纠结隔阂啦blahblah这里就不多扯了。想着自己也算看过不少自认为还算不错的侦探作品吧，这里就只罗列一些个人最喜欢的作品，然后有些太有名的也不写了比如福尔摩斯、柯南之类的，就算一个个人的小推荐吧。有兴趣的自己看看呗嘤嘤嘤～ 书籍埃勒里·奎因奎因兄弟是我个人最喜欢的推理小说作家，这里摘抄一下豆瓣的描述： 埃勒里·奎因（Ellery Queen）是曼弗雷德·班宁顿·李（Manfred Bennington Lee，1905年-1971 年）和弗雷德里克·丹奈（Frederic Dannay，1905年-1982年）合用的笔名，侦探推理小说史上承前启后的经典作家，美国推理小说代名词。曼弗雷德·班宁顿·李与弗雷德里克·丹奈是一对表兄弟，他们开创了合作撰写推理小说成功的先例。在他们的小说作品中，埃勒里·奎因也是小说主人公，一位侦探小说作家兼超级侦探。从1929年到1971年，埃勒里·奎因共发表数十部推理小说，其中9部“国名系列”作品和4部“悲剧系列”作品被认为是古典解谜推理小说最高水平的代表。 奎因的所谓“公平的推理小说”，也即日本所谓本格推理小说，我认为是最经典的、最有代表性的作品。这类作品将线索一一罗列，让读者与作品中的侦探进行公平的对决。奎因兄弟的作品中还有标志性的“挑战读者”环节，挑战观众是否能从已给的线索中看出事件的真相。个人最喜欢的奎因的作品有： 《希腊棺材之谜》：绝对的本格推理经典，不可不读的侦探小说，最跌宕起伏，难以置信的逻辑和故事，首推首推首推。 《Y的悲剧》：最悲伤的故事，推理非常严谨，结局非常惊人，强烈推荐。 《X的悲剧》：个人认为最有趣的故事，老雷恩魅力十足，值得一读的优秀作品。 阿加莎·克里斯蒂加婆就不用详细介绍了，毕竟太有名了，她也有诸多属于家喻户晓的小说，例如《东方快车谋杀》、《无人生还》、《尼罗河上的惨案》。都是很优秀的古典推理作品，但是个人不太喜欢这种英式风格啊感觉有点磨叽，看着需要不少耐心。这里推荐《罗杰疑案》和《ABC谋杀》，都是不是特别有名吧但超棒的书，读起来很有意思。 东野圭吾东野圭吾也超有名的啦，《白夜行》、《嫌疑人X的献身》都算是那种大家都知道的书。有些书的话我个人不是特别喜欢，因为感觉不属于那种本格的范围了，可能有些人会喜欢吧。这里推荐几本我很喜欢的不是很出名的： 《流星之绊》：喜爱喜爱喜爱，最早读的东野圭吾的小说，很暖的结局。 《黑笑小说》《毒笑小说》《怪笑小说》：当初是看名字很有意思才看的XD，不过这三本短篇小说集确实很有意思。 《回廊亭杀人案》：有点兼具社会派和本格派的作品吧，感觉算是我能接受的类型了，还算挺喜欢的，安利安利。 岛田庄司岛田的作品读的不多，但是感觉都很好看，这里推荐一个是《占星术杀人魔法》，还有一个是《斜屋犯罪》，感觉他的作品有那种比较强烈的风格（有些有点恶心讲道理），较为独特吧，所以可能在海外没有东野那么火吧。 其他比如钱德勒的《漫长的告别》也算经典吧，但是个人不是很喜欢。还有一些新一点的欧美作品我没怎么读过，这里就不做推荐了。 电视剧摩斯探长前传/Endeavors某人特别喜爱的作品吧然后推荐给我的。结果我发现简直太对胃口了，缓慢的节奏，阴郁的天气反衬着探长契而不舍，追求真相的精神和行为，简直perfect！经典的歌剧和BGM，永远合身的西装加风衣搭配，还有可爱的贵人星期四大大和英格兰那美丽的田园风光，还要什么自行车？？？！！！快去看吧孩子。 谋杀/Killing美版的摩斯探长？类似吧。疑点重重，层层推进，一个案件讲两季就问您还有谁？？？感觉这个剧情才像是警察正常的破案速度23333。看完怀疑西雅图天天下雨系列，女主蜜汁越看越好看，欧范十足，五星力推。 基本演绎法/Elementary刚播出的时候挺喜欢的剧，女版华人花生真可爱啊啃手指～但是后面开始感觉缺少适当的主线剧情，故事缺乏主要矛盾导致感觉变成了福尔摩斯天天刷日常任务，故弃了，但是前两季还是挺不错的，嗯。 九号秘事/Inside NO.9个人特别特别特别喜欢的一部英剧，其实不算推理类剧吧，就当打点擦边球嘻嘻嘻。每一季的每一集都是一个不同的故事，然后主要演员就那么两个，他们还负责编剧什么的，很有才。故事大多比较黑色幽默，也有些比较恐怖，看完多少会有点后背发凉，细思恐极，安利。 其他什么神探夏洛克啦，真探啦都挺出名的，没看过的也可以看看哟～ 电影电影的话感觉挺多的，但是把视角专门放在一个侦探上的很少，毕竟篇幅有限。有些看起来是侦探作品的例如大侦探福尔摩斯也不能算那种严格意义上的推理吧。这里就随意推几个有意思的悬疑电影吧： 热血警探/Hot Fuzz：英式作品中的少数，各种搞怪各种酷炫，但是黑色幽默以及荒诞的剧情还是很British的。 罪恶之家/An Inspector Calls：BBC拍的电影，剧情很有意思，但是故事多多少少有点另类，不适合所有观众。 囚徒/Prisoners：狼叔狼叔狼叔！重要的事要多说几遍。总体故事还是挺不错的，可能有点拖沓吧，很久前看的了不太记得了。 杀人回忆/Memories of Murder：经典的电影了吧，真实世界中的案件往往都是这样，没有神探，没有结局，在一片喧嚣中归于平静，沉入了历史的长河，很接地气的剧情。 大概就这些吧，以后有时间也会继续写一些其他方面的推荐或者总结的呢～","categories":[],"tags":[{"name":"recommend","slug":"recommend","permalink":"http://yoursite.com/tags/recommend/"}]},{"title":"星战8二刷后：一部不够优秀的电影","slug":"2","date":"2018-01-09T00:00:00.000Z","updated":"2019-12-18T10:42:22.104Z","comments":true,"path":"2018/01/09/2/","link":"","permalink":"http://yoursite.com/2018/01/09/2/","excerpt":"","text":"今天去二刷了星战8:最后的绝地武士。一刷时的激动和中二魂已经散去，认真的再看过全片后，我有了些更客观的看法。这是一部口碑评价两极分化严重的电影，部分观众认为这部电影彻底失去了星战传统的风格，愚蠢的剧情，生硬的改变，毁掉了一切；而另一部分观众则认为星战8是一部承前启后的优秀作品，优秀的视觉效果，不断反转的结局，无时不提醒着观众，这是一部全新的高品质星战电影。而我认为，星战8是一部折中的、妥协的电影，它不算多么优秀，却也不可说多么不堪。 故事星战8的故事延续自星战7:原力觉醒，讲述了女主角蕾伊寻找卢克天行者渴望学习原力，然后另一方面反叛军挣脱第一秩序追杀的故事。全片从卢克出现的第一个片段开始就紧扣“最后的绝地武士”这一词：他接过光剑后片刻之后扔到身后；尤达大师英灵反手炸了“指挥部”；卢克的“羽化而登仙”，无一不体现着旧势力的退场。而另外一方面，蕾伊的进步，本的野心，少年的微弱原力，也体现着旧势力下新力量的崛起。总体来讲星战8的故事是合格偏优秀的，合理的故事延续上部剧情让观众易于接受理解，结局精巧的多次反转也着实让人眼前一亮，整部电影在完成系列使命的大框架下成功做到了该做的事情。但不得不说多个地方意义不明：莱亚公主强行续命；金色睡衣反派死得不明不白；拖沓的赌场片段；卢克犹豫和懦弱的表现都是扣分项。在满足老粉和少部分人的口味这件事上，星战8无疑是失败的。 主题从主题角度来讲星战8是非常优秀的，其一自然是体现新旧交替是历史的必然。尤达大师和卢克的对话设计的很妙：学生应当是超越老师的所在，旧的知识也不应当一味固守。同时配合反叛军这边新旧势力的矛盾和权利的移交，这部电影的明线不断的围绕着旧和新的讨论展开，演员们的合力演出完美诠释了这个主题。另一方面是对战争的思考，Poe（抱歉忘了中翻叫啥来着了）鲁莽到理性的转变，我们可爱的美妈（真的有点相似啊）对Finn的绝处拯救，反叛军惨痛逃出，我们都能看出一点敦刻尔克大撤退的感觉吼。同时在赌场找来的口吃黑客的左右摇摆，军火商的双面交易，莱亚公主看着损失的舰队陷入深思，都有不错的深度。从侠盗一号到星战8，新星战对战争的思考可以说是下足了力气。还有一条主题我认为是对原力的解读，蕾伊的身份，卢克对原力的传授，小孩子隔空拿来扫把，电影似乎想告诉我们原力不是家族的遗传能力，也不是拿来举石头的简单力量。但对原力的黑暗面和更深层含义的阐述，电影似乎想去涉及，但意义不明，更多的是感觉浮于表面，这也许是可以提高的地方。 角色角色塑造我认为合格但不优秀，蕾伊，本，芬，Poe几个人的角色都塑造的相当不错，他们都在片中发生了合理的转变。但几个老角色确实刻画让人失望，莱亚公主的演员已经过世，为什么还把她留着？强行续命也多少让人感觉尴尬。莱亚公主休眠期间的代理老姐也莫名其妙，为什么不把计划告诉Poe？难道怕Poe是内奸？虽然最后洗白加帅气自曝，但显得过于为剧情设计而生。金色睡袍反派也是各种立flag，完全没有这个人物的更多的故事，那还拿出来当前期大反派？这种为剧情发展而做出来的配角为什么要给个重要的位置？最后，我们亲爱的卢克，人物设计的一塌糊涂，看得出这是老粉丝最难接受的，卢克的犹豫和意义不明的行为，多少和当初的角色设定大相径庭，尽管最后站出来华丽了一场，依然没办法掩盖前大半部电影的无力。他教了蕾伊多少东西？他对本产生了什么影响？都没有。到头来他还是那个需要听尤达大师开导的孩子？然后最后潇洒了一把就走了？留给别人一堆烂摊子？我们看不到这个角色年老后的成长，最后的一段也只能算是炫技罢了。卢克的饰演者，哈米尔也表达了对这部电影的失望，可以说是全片最大的败笔。 技术、美术和剪辑技术和美术毫无疑问的满分，继续完美的融合了新时代的特效技术和nostalgia的星空战舰还有C3PO（XD）。第一秩序旗舰上反派的红色大厅和红色侍卫，反叛军巡航舰自杀式超空间跃进，无一不让人屏住呼吸，汗毛竖起，全体起立。最后一段盐矿星球的美术设计也是堪称绝佳，飞船低空滑行，白色的地面掀起红色的碎屑；大炮开门之后黑色的土壤覆盖血红色高温后的盐层，白色的风暴兵慢动作下鱼涌而入，画面太美。论技术和美术，无疑超越了任何前作，达到了优秀的现代商业电影水准。另一方面很多时候的剪辑还是感觉捉急，前半段不停的跳转场景，蕾伊和卢克岛上的片段被分成很多很多很小的片段，给人一种他们在岛上磨叽了很久很久的感觉，而且蕾伊刚展现完对黑暗面的无法自控，后脚画面再回来卢克就继续教学？连贯性很差。场景切换同样，试图去使用老式的风格，但不彻底，多少感觉有点不伦不类，不如统一下风格。 总结所谓“长江后浪推前浪”，星战7在保守维稳之后，星战8扛起了新时代讲新星战故事的大旗（啪啪啪啪这里有掌声）。我个人认为这种基调是正确的，但我也抱着忧虑。正确的是我相信在迪斯尼收购星战IP之后，讲述全新的故事有益于这个系列的继续扩张，人们不能总还停留在卢克和他爹爹那个时代，顺应新的时代潮流，女性加黑人的主角，没有强力爹妈的蕾伊，无疑都是很好的设定。整部电影的副线，反叛军的重生，Poe的改变，共和国的新力量都展现在电影故事之中。相信这些都能够圈粉更多的观众，特别是小孩子，这是我对新系列的肯定。忧虑的是星战真的是要走漫威的老路吗迪斯尼，如此高频率的新电影，如此生硬尴尬的笑点，您怕不是又要搞什么世界观啊我去。。。真诚希望用心拍少片，不要和漫威电影一样和拍连续剧似的。OK？","categories":[],"tags":[{"name":"review","slug":"review","permalink":"http://yoursite.com/tags/review/"},{"name":"starwar","slug":"starwar","permalink":"http://yoursite.com/tags/starwar/"}]}]}